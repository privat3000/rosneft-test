using System;
using System.Diagnostics;
using System.Reflection.PortableExecutable;
using System.Xml.Linq;
using Microsoft.Data.Sqlite;
using Microsoft.EntityFrameworkCore.Query.Internal;
using System.IO;
using System.Linq.Expressions;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory.Database;

namespace HelloApp
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.Write
               ("Введите цифру нужного запроса \n" +
               "1. Информацию обо всех абонентах и наименование тарифного плана, на котором находится каждый из них \n" +
               "2. Арендованные устройства у заданных абонентов \n" +
               "3. ТОП5 тарифов по количеству абонентов на каждом тарифном плане \n" +
               "4. Суммарные ежемесячные затраты каждого из абонентов на указанную дату \n" +
               "5. Все абоненты в заданном городе с самой высокой скоростью подключения к сети Интернет \n" +
               "6. Количество подключенных на текущий день услуг у каждого абонента \n" +
               "7. Операции CRUD \n\n");

            string number = Console.ReadLine();
            switch (number)
            {
                case "1":
                    try
                    {
                        StreamWriter sw = new StreamWriter("C:\\Users\\priva\\Desktop\\rezult.txt");
                        string sqlExpression = "SELECT s.*, case when st.ACTIVE = 0 then '-' ELSE t.NAME end AS tarrif_name FROM subscriber_tarrif st JOIN tarrif_plan t ON st.TARRIF = t.ID LEFT JOIN subscriber s ON st.SUBSCRIBER = s.ID;";
                        using (var connection = new SqliteConnection("Data Source=C:\\Users\\priva\\Desktop\\Providers.db; Mode=ReadWrite; Foreign Keys=True; "))
                        {
                            connection.Open();

                            SqliteCommand command = new SqliteCommand(sqlExpression, connection);
                            using (SqliteDataReader reader = command.ExecuteReader())
                            {
                                if (reader.HasRows)
                                {
                                    sw.WriteLine("\n|ID; \t| AccountNumber; \t| First_Name; \t| Last_Name; \t| Second_Name; \t| Birthday; \t|\t City; \t\t|\t Adress; \t|\t tarrif_name; \t| \n");
                                    while (reader.Read())
                                    {
                                        var ID = reader.GetValue(0);
                                        var AccountNumber = reader.GetValue(1);
                                        var First_Name = reader.GetValue(2);
                                        var Last_Name = reader.GetValue(3);
                                        var Second_Name = reader.GetValue(4);
                                        var Birthday = reader.GetValue(5);
                                        var City = reader.GetValue(6);
                                        var Adress = reader.GetValue(7);
                                        var tarrif_name = reader.GetValue(8);
                                        sw.WriteLine($"|{ID}; \t| {AccountNumber}; \t| {First_Name}; \t| {Last_Name}; \t| {Second_Name}; \t| {Birthday}; \t| {City}; \t\t|\t {Adress}; \t|\t {tarrif_name}; \t|");
                                    }
                                }
                            }
                        }
                        sw.Close();
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine("Exception: " + e.Message);
                    }
                        Console.Read();

                    break;
                case "2":
                    Console.WriteLine("Введите Фамилию \n");
                    string name = Console.ReadLine();
                    string sqlExpression1 = $"SELECT s.FIRST_NAME as subscriber_name, s.LAST_NAME as subscriber_last_name, s.SECOND_NAME as subscriber_second_name,\r\nd.MODEL as device_model, d.PRICE_PER_MONTH as device_price, sd.DATE_ACTIVE_FROM as date_active_from, sd.DATE_ACTIVE_TO as date_acrive_to\r\nFROM subscriber_devices AS sd\r\nJOIN devices_types AS d ON sd.DEVICE = d.ID\r\nJOIN subscriber AS s ON sd.SUBSCRIBER = s.ID \r\nWHERE sd.DATE_ACTIVE_FROM <= '2021-11-16' AND sd.DATE_ACTIVE_TO >= '2021-11-16' AND s.LAST_NAME LIKE '%{name}%'\r\nORDER BY d.PRICE_PER_MONTH DESC;";
                    using (var connection = new SqliteConnection("Data Source=C:\\Users\\priva\\Desktop\\Providers.db; Mode=ReadWrite; Foreign Keys=True; "))
                    {
                        connection.Open();

                        SqliteCommand command = new SqliteCommand(sqlExpression1, connection);
                        using (SqliteDataReader reader = command.ExecuteReader())
                        {
                            if (reader.HasRows)
                            {
                                Console.WriteLine("\n|Name; | Last_Name; | Second_Name; | Model; | Price; | Date_from; | Date_to; |\n");
                                while (reader.Read())
                                {
                                    var Name = reader.GetValue(0);
                                    var Last_Name = reader.GetValue(1);
                                    var Second_Name = reader.GetValue(2);
                                    var Model = reader.GetValue(3);
                                    var Price = reader.GetValue(4);
                                    var Date_from = reader.GetValue(5);
                                    var Date_to = reader.GetValue(6);
                                    Console.WriteLine($"\n| {Name}; | {Last_Name}; \t| {Second_Name}; | {Model}; | {Price}; \t| {Date_from}; \t| {Date_to}; |\n");
                                }
                            }
                        }
                    }
                    Console.Read();
                    break;
                case "3":
                    string sqlExpression2 = $"SELECT t.NAME as tarrif_name, t.CONNECTION_SPEED as tarrif_connection_speed, t.PRICE_PER_MONTH as price_tarrif,\r\nCOUNT(st.SUBSCRIBER) as count_subscribers \r\nFROM subscriber_tarrif as st\r\nJOIN tarrif_plan t ON st.TARRIF = t.ID\r\nGROUP BY st.TARRIF, t.NAME\r\nORDER BY count_subscribers desc\r\nLIMIT 5;";
                    using (var connection = new SqliteConnection("Data Source=C:\\Users\\priva\\Desktop\\Providers.db; Mode=ReadWrite; Foreign Keys=True; "))
                    {
                        connection.Open();

                        SqliteCommand command = new SqliteCommand(sqlExpression2, connection);
                        using (SqliteDataReader reader = command.ExecuteReader())
                        {
                            if (reader.HasRows)
                            {
                                Console.WriteLine("\n|T.Name; | Connection speed; | Tarif_Price; | Count; |\n");
                                while (reader.Read())
                                {
                                    var T_Name = reader.GetValue(0);
                                    var Connection_speed = reader.GetValue(1);
                                    var Tarif_Price = reader.GetValue(2);
                                    var Count = reader.GetValue(3);
                                    Console.WriteLine($"\n|{T_Name}; | {Connection_speed}; | {Tarif_Price}; | {Count}; |\n");
                                }
                            }
                        }
                    }
                    Console.Read();
                    break;
                   case "4":
                    Dictionary<int, string[]> listSubscribers = new Dictionary<int, string[]>();
                    string sqlExpression3 = $"SELECT sub.*, t.PRICE_PER_MONTH FROM subscriber_tarrif AS st\r\n    JOIN tarrif_plan AS t ON t.ID = st.TARRIF\r\n    JOIN subscriber AS sub  ON sub.ID = st.SUBSCRIBER\r\n    WHERE ACTIVE = 1;SELECT sub.*, t.PRICE_PER_MONTH FROM subscriber_tarrif AS st\r\n    JOIN tarrif_plan AS t ON t.ID = st.TARRIF\r\n   left JOIN subscriber AS sub  ON sub.ID = st.SUBSCRIBER\r\n    WHERE ACTIVE = 1;";
                    using (var connection = new SqliteConnection("Data Source=C:\\Users\\priva\\Desktop\\Providers.db; Mode=ReadWrite; Foreign Keys=True; "))
                    {

                        connection.Open();

                        SqliteCommand command = new SqliteCommand(sqlExpression3, connection);
                        using (SqliteDataReader reader = command.ExecuteReader())
                        {
                            if (reader.HasRows)
                            {
                                while (reader.Read())
                                {

                                    string[] subscriber = new string[8];
                                    int id = Convert.ToInt32(reader.GetValue(0));
                                    subscriber[0] = Convert.ToString(reader.GetValue(1));
                                    subscriber[1] = Convert.ToString(reader.GetValue(2));
                                    subscriber[2] = Convert.ToString(reader.GetValue(3));
                                    subscriber[3] = Convert.ToString(reader.GetValue(4));
                                    subscriber[4] = Convert.ToString(reader.GetValue(5));
                                    subscriber[5] = Convert.ToString(reader.GetValue(6));
                                    subscriber[6] = Convert.ToString(reader.GetValue(7));
                                    subscriber[7] = Convert.ToString(reader.GetValue(8));

                                    if (listSubscribers.ContainsKey(id))
                                    {
                                        double price = Convert.ToDouble(listSubscribers[id][7]);
                                        price += Convert.ToDouble(subscriber[7]);
                                        listSubscribers[id][7] = Convert.ToString(price);
                                    }
                                    else
                                    {
                                        listSubscribers.Add(id, subscriber);
                                    }
                                }
                            }
                        }
                    }
                    string sqlExpression4 = $"SELECT sub.*, d.PRICE_PER_MONTH FROM subscriber_devices AS sd\r\n    JOIN devices_types AS d ON d.ID = sd.DEVICE\r\n    JOIN subscriber AS sub  ON sub.ID = sd.SUBSCRIBER\r\n    WHERE DATE_ACTIVE_FROM <= '2021-11-16' AND DATE_ACTIVE_TO >= '2021-11-16';SELECT sub.*, d.PRICE_PER_MONTH FROM subscriber_devices AS sd\r\n    JOIN devices_types AS d ON d.ID = sd.DEVICE\r\n    JOIN subscriber AS sub  ON sub.ID = sd.SUBSCRIBER\r\n    WHERE DATE_ACTIVE_FROM <= '2021-11-16' AND DATE_ACTIVE_TO >= '2021-11-16';";
                    using (var connection = new SqliteConnection("Data Source=C:\\Users\\priva\\Desktop\\Providers.db; Mode=ReadWrite; Foreign Keys=True; "))
                    {

                        connection.Open();

                        SqliteCommand command = new SqliteCommand(sqlExpression4, connection);
                        using (SqliteDataReader reader = command.ExecuteReader())
                        {
                            if (reader.HasRows)
                            {
                                while (reader.Read())
                                {

                                    string[] subscriber = new string[8];
                                    int id = Convert.ToInt32(reader.GetValue(0));
                                    subscriber[0] = Convert.ToString(reader.GetValue(1));
                                    subscriber[1] = Convert.ToString(reader.GetValue(2));
                                    subscriber[2] = Convert.ToString(reader.GetValue(3));
                                    subscriber[3] = Convert.ToString(reader.GetValue(4));
                                    subscriber[4] = Convert.ToString(reader.GetValue(5));
                                    subscriber[5] = Convert.ToString(reader.GetValue(6));
                                    subscriber[6] = Convert.ToString(reader.GetValue(7));
                                    subscriber[7] = Convert.ToString(reader.GetValue(8));

                                    if (listSubscribers.ContainsKey(id))
                                    {
                                        double price = Convert.ToDouble(listSubscribers[id][7]);
                                        price += Convert.ToDouble(subscriber[7]);
                                        listSubscribers[id][7] = Convert.ToString(price);
                                    }
                                    else
                                    {
                                        listSubscribers.Add(id, subscriber);
                                    }
                                }
                            }
                        }
                    }
                    string sqlExpression5 = $"SELECT sub.*, s.PRICE_PER_MONTH FROM subscriber_services AS ss\r\n    JOIN services AS s ON s.ID = ss.SERVICE\r\n    JOIN subscriber AS sub  ON sub.ID = ss.SUBSCRIBER\r\n    WHERE DATE_ACTIVE_FROM <= '2021-11-16'AND DATE_ACTIVE_TO >= '2021-11-16';";
                    using (var connection = new SqliteConnection("Data Source=C:\\Users\\priva\\Desktop\\Providers.db; Mode=ReadWrite; Foreign Keys=True; "))
                    {

                        connection.Open();

                        SqliteCommand command = new SqliteCommand(sqlExpression5, connection);
                        using (SqliteDataReader reader = command.ExecuteReader())
                        {
                            if (reader.HasRows)
                            {
                                while (reader.Read())
                                {

                                    string[] subscriber = new string[8];
                                    int id = Convert.ToInt32(reader.GetValue(0));
                                    subscriber[0] = Convert.ToString(reader.GetValue(1));
                                    subscriber[1] = Convert.ToString(reader.GetValue(2));
                                    subscriber[2] = Convert.ToString(reader.GetValue(3));
                                    subscriber[3] = Convert.ToString(reader.GetValue(4));
                                    subscriber[4] = Convert.ToString(reader.GetValue(5));
                                    subscriber[5] = Convert.ToString(reader.GetValue(6));
                                    subscriber[6] = Convert.ToString(reader.GetValue(7));
                                    subscriber[7] = Convert.ToString(reader.GetValue(8));

                                    if (listSubscribers.ContainsKey(id))
                                    {
                                        double price = Convert.ToDouble(listSubscribers[id][7]);
                                        price += Convert.ToDouble(subscriber[7]);
                                        listSubscribers[id][7] = Convert.ToString(price);
                                    }
                                    else
                                    {
                                        listSubscribers.Add(id, subscriber);
                                    }
                                }
                            }
                        }
                    }
                    Console.WriteLine("\n| ID | AccountNumber | First_Name | Last_Name | Second_Name | Birthday | City | Adress | Sum | \n");
                   foreach (var subscriber in listSubscribers)
                    {
                        string[] sub = subscriber.Value;
                        Console.WriteLine ($"| {subscriber.Key} | {sub[0]} | {sub[1]} | {sub[2]} | {sub[3]} | {sub[4]} | {sub[5]} | {sub[6]} | {sub[7]} |\n");
                    }
                    Console.Read();
                     break;
                case "5":
                    {
                        Console.WriteLine("Введите Город \n");
                        string city = Console.ReadLine();
                        string sqlExpression3 = $"SELECT sub.FIRST_NAME, sub.LAST_NAME, sub.SECOND_NAME,MAX(t.CONNECTION_SPEED) AS MAX_CONNECTION_SPEED\r\nFROM subscriber_tarrif st\r\nLEFT JOIN tarrif_plan t ON st.TARRIF = t.ID\r\nLEFT JOIN subscriber sub ON st.SUBSCRIBER = sub.ID\r\nWHERE sub.CITY LIKE '%{city}%'\r\nGROUP BY sub.FIRST_NAME;";
                        using (var connection = new SqliteConnection("Data Source=C:\\Users\\priva\\Desktop\\Providers.db; Mode=ReadWrite; Foreign Keys=True; "))
                        {
                            connection.Open();

                            SqliteCommand command = new SqliteCommand(sqlExpression3, connection);
                            using (SqliteDataReader reader = command.ExecuteReader())
                            {
                                if (reader.HasRows)
                                {
                                    Console.WriteLine("\n|Name; | Last_Name; | Second_Name; | Connection_speed; |\n");
                                    while (reader.Read())
                                    {
                                        var Name = reader.GetValue(0);
                                        var Last_Name = reader.GetValue(1);
                                        var Second_Name = reader.GetValue(2);
                                        var Connection_speed = reader.GetValue(3);
                                        Console.WriteLine($"\n|{Name}; | {Last_Name}; | {Second_Name}; | {Connection_speed}; |\n");
                                    }
                                }
                            }
                        }
                        Console.Read();
                    }
                    break;
                case "6":
                    {
                        string sqlExpression4 = $"SELECT sub.FIRST_NAME, sub.LAST_NAME, sub.SECOND_NAME, sub.ACCOUNT_NUMBER, sub.CITY, sub.ADRESS,\r\nCOUNT(ss.SUBSCRIBER) as COUNT_SUBSCRIBER_SERVICES FROM subscriber_services ss\r\nLEFT JOIN subscriber sub ON ss.SUBSCRIBER = sub.ID\r\nWHERE ss.DATE_ACTIVE_FROM <= '2021-11-16' and ss.DATE_ACTIVE_TO >= '2021-11-16'\r\nGROUP BY sub.FIRST_NAME\r\nORDER BY COUNT_SUBSCRIBER_SERVICES DESC";
                        using (var connection = new SqliteConnection("Data Source=C:\\Users\\priva\\Desktop\\Providers.db; Mode=ReadWrite; Foreign Keys=True; "))
                        {
                            connection.Open();

                            SqliteCommand command = new SqliteCommand(sqlExpression4, connection);
                            using (SqliteDataReader reader = command.ExecuteReader())
                            {
                                if (reader.HasRows)
                                {
                                    Console.WriteLine("\n|Name; | Last_Name; | Second_Name; | AccountNumber; | City; | Adress; | Count; | \n");
                                    while (reader.Read())
                                    {
                                        var Name = reader.GetValue(0);
                                        var Last_Name = reader.GetValue(1);
                                        var Second_Name = reader.GetValue(2);
                                        var AccountNumber = reader.GetValue(3);
                                        var City = reader.GetValue(4);
                                        var Adress = reader.GetValue(5);
                                        var Count = reader.GetValue(6);
                                        Console.WriteLine($"\n|{Name}; | {Last_Name}; | {Second_Name}; | {AccountNumber}; \t| {City}; \t\t|\t {Adress}; \t|\t {Count}; \t| \n");
                                    }
                                }
                            }
                        }
                    }
                    Console.Read();                    
                    break;
                case "7":
                    {
                        Console.Write
                            ("Выберите действие которое вы хотите совершить \n" +
                            "Добавить таблицу \n" +
                            "Внести данные \n" +
                            "Изменить таблицу \n" +
                            "Удалить таблицу \n");
                        string choose = Console.ReadLine();
                        switch (choose)
                        {
                            case "Добавить таблицу":
                                {
                                    Console.Write("\n Введите название таблицы \n");
                                    string name1 = Console.ReadLine();
                                    Console.Write("\n Введите название столбцов и их параметры \n");
                                    string colons = Console.ReadLine();
                                    using (var connection = new SqliteConnection("Data Source=C:\\Users\\priva\\Desktop\\Providers.db; Mode=ReadWrite; Foreign Keys=True; "))
                                    {
                                        connection.Open();
                                        SqliteCommand command = new SqliteCommand();
                                        command.Connection = connection;
                                        command.CommandText = $"CREATE TABLE {name1}({colons})";
                                        command.ExecuteNonQuery();
                                        Console.WriteLine($"Таблица {name1} создана");
                                    }
                                    Console.Read();
                                }
                                break;
                            case "Внести данные":
                                {
                                    Console.Write("Введите название таблицы\n");
                                    string name1 = Console.ReadLine();
                                    Console.Write("Введите название столбцов\n");
                                    string colons = Console.ReadLine();
                                    Console.Write("Введите значения столбцов\n");
                                    string values = Console.ReadLine();
                                    using (var connection = new SqliteConnection("Data Source=C:\\Users\\priva\\Desktop\\Providers.db; Mode=ReadWrite; Foreign Keys=True; "))
                                    {
                                        connection.Open();

                                        SqliteCommand command = new SqliteCommand();
                                        command.Connection = connection;
                                        command.CommandText = $"INSERT INTO {name1} ({colons}) VALUES ({values})";
                                        int number2 = command.ExecuteNonQuery();

                                        Console.WriteLine($"В таблицу Users добавлено объектов: {number2}\n");
                                    }
                                    Console.Read();
                                }
                                break;
                            case "Изменить таблицу":
                                {
                                    Console.Write("Введите название таблицы\n");
                                    string name1 = Console.ReadLine();
                                    Console.Write("Введите измениемое значение\n");
                                    string colons = Console.ReadLine();
                                    Console.Write("Введите способ нахождения значения\n");
                                    string values = Console.ReadLine();
                                    string sqlExpression = $"UPDATE {name1} SET {colons} WHERE {values}";
                                    using (var connection = new SqliteConnection("Data Source=C:\\Users\\priva\\Desktop\\Providers.db; Mode=ReadWrite; Foreign Keys=True; "))
                                    {
                                        connection.Open();

                                        SqliteCommand command = new SqliteCommand(sqlExpression, connection);

                                        int number2 = command.ExecuteNonQuery();

                                        Console.WriteLine($"Обновлено объектов: {number2}\n");
                                    }
                                    Console.Read();
                                }
                                break;
                            case "Удалить таблицу":
                                {
                                    Console.Write("Введите название таблицы\n");
                                    string name1 = Console.ReadLine();
                                    Console.Write("\nВведите способ нахождения значения\n");
                                    string values = Console.ReadLine();
                                    string sqlExpression = $"\nDELETE  FROM {name1} WHERE {values}\n";
                                    using (var connection = new SqliteConnection("Data Source=C:\\Users\\priva\\Desktop\\Providers.db; Mode=ReadWrite; Foreign Keys=True; "))
                                    {
                                        connection.Open();

                                        SqliteCommand command = new SqliteCommand(sqlExpression, connection);

                                        int number2 = command.ExecuteNonQuery();

                                        Console.WriteLine($"Удалено объектов: {number2}\n");
                                    }
                                    Console.Read();
                                }
                                break;

                        }
                    }
                    break;
            
            }
        }
    }
}
